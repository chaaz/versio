---
# DO NOT EDIT
# Created from template "github-publish.yml".
name: publish
"on":
  - workflow_dispatch
env:
  RUSTFLAGS: "-D warnings"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  GITHUB_USER: "${{ github.actor }}"
jobs:
  project-matrixes:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      cargo-matrix: "${{ steps.find-cargo-matrix.outputs.matrix }}"
      all-matrix: "${{ steps.find-all-matrix.outputs.matrix }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Find cargo matrix
        id: find-cargo-matrix
        run: "echo \"::set-output name=matrix::{\\\"include\\\":$(versio -l none info -l cargo -R -N)}\""
      - name: Find all matrix
        id: find-all-matrix
        run: "echo \"::set-output name=matrix::{\\\"include\\\":$(versio -l none info -a -R -N)}\""
  versio-checks:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Fetch history
        run: git fetch --unshallow
      - name: Check projects
        run: versio check
      - name: Output plan
        run: versio plan
  cargo-checks:
    needs: project-matrixes
    runs-on: ubuntu-latest
    strategy:
      matrix: "${{ fromJson(needs.project-matrixes.outputs.cargo-matrix) }}"
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    defaults:
      run:
        working-directory: "${{ matrix.root }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libgpg-error-dev libgpgme-dev
      - name: Get cargo stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Get cargo nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Find paths
        id: cargo-find-paths
        run: "echo ::set-output name=cargo-lock-glob::\"${{ matrix.root }}\"/**/Cargo.lock"
      - name: Cache cargo and target
        uses: actions/cache@v1
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n${{ matrix.root }}/target\n"
          key: "${{ runner.os }}-cargo-${{ hashFiles(steps.cargo-find-paths.outputs.cargo-lock-glob) }}"
      - name: Check structure
        run: cargo clippy
      - name: Check format
        run: cargo +nightly fmt -- --check
      - name: Check tests
        run: cargo test
  github-publish:
    needs:
      - versio-checks
      - cargo-checks
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      upload_url: "${{ steps.publish-to-github.outputs.upload_url }}"
    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Find version
        id: find-version
        run: "echo ::set-output name=version::$(versio -l none info -i 0 -F | jq -r '.[0].full_version')"
      - name: Publish to GitHub
        id: publish-to-github
        uses: actions/create-release@v1
        with:
          tag_name: "${{ steps.find-version.outputs.version }}"
          release_name: "(TODO) RELEASE FOR ${{ steps.find-version.outputs.version }}"
          body: "(TODO) SUMMARY\n- (TODO) FEATURE1\n\nNew to Versio? The [repository](https://github.com/chaaz/versio) is the best place to learn about Versio and what it can do. If you want to report a bug or request a feature, you can do so at our [Issues](https://github.com/chaaz/versio/issues) link, but we ask you first read the [Troubleshooting](https://github.com/chaaz/versio/blob/main/docs/troubleshooting.md) page learn about problems and their solutions.\n\nTo install, follow the instructions for your platform; some files might be zipped for improved download speed. For example, on MacOS you can do something like this (assuming `~/bin` exists and is in your PATH):\n\n```sh\ncurl -L https://github.com/chaaz/versio/releases/download/${{ steps.find-version.outputs.version }}/versio__x86_64-apple-darwin -o ~/bin/versio\nchmod +x ~/bin/versio\n```\n\n**MacOS:** download `versio__x86_64-apple-darwin`, copy to `versio` in your PATH.\n**GNU Linux 64:** download `versio__x86_64-unknown-linux-gnu`, copy to `versio` in your PATH.\n**Windows:** download `versio__x86_64-pc-win32.exe`, copy to `versio.exe` in your %PATH.\n"
          draft: true
          prerelease: false
          commitish: main
  publish-versio:
    needs: github-publish
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            root: "."
            rustflags: "-D warnings -C link-args=-s"
            bin_name: versio
          - os: macos-latest
            target: x86_64-apple-darwin
            root: "."
            rustflags: "-D warnings"
            bin_name: versio
          - os: windows-latest
            target: x86_64-pc-win32.exe
            root: "."
            rustflags: "-D warnings"
            bin_name: versio.exe
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: "${{ matrix.os }}"
    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Install Ubuntu dependencies
        if: "matrix.os == 'ubuntu-latest'"
        run: sudo apt-get update && sudo apt-get install -y libgpg-error-dev libgpgme-dev
      - name: Install MacOS dependencies
        if: "matrix.os == 'macos-latest'"
        run: brew update; brew install gpgme
      - name: Install Windows dependencies
        if: "matrix.os == 'windows-latest'"
        run: "echo \"Installing gnupg\"\n$env:PATH = \"C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\chocolatey\\bin\"\n[Environment]::SetEnvironmentVariable(\"Path\", $env:PATH, \"Machine\")\nchoco install -y gnupg\nls 'C:\\Program Files (x86)'\necho \"Done installing gnupg\"\necho \"C:\\Program Files (x86)\\GnuPG\\bin\" >> $env:GITHUB_PATH\n"
      - name: Get cargo stable
        if: "matrix.os != 'windows-latest'"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Get cargo nightly
        if: "matrix.os != 'windows-latest'"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Get Windows cargo stable
        if: "matrix.os == 'windows-latest'"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-i686-pc-windows-msvc
          target: i686-pc-windows-gnu
          components: clippy
          default: true
      - name: Get Windows cargo nightly
        if: "matrix.os == 'windows-latest'"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-i686-pc-windows-msvc
          target: i686-pc-windows-gnu
          components: rustfmt
      - name: Update Windows target configuration
        if: "matrix.os == 'windows-latest'"
        run: rustup set default-host i686-pc-windows-gnu
      - name: Find paths
        id: cargo-find-paths
        run: "echo ::set-output name=cargo-lock-glob::\"${{ matrix.root }}\"/**/Cargo.lock"
      - name: Cache cargo and target
        uses: actions/cache@v1
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n${{ matrix.root }}/target\n"
          key: "${{ runner.os }}-cargo-${{ hashFiles(steps.cargo-find-paths.outputs.cargo-lock-glob) }}"
      - name: Examine GnuPG include Windows
        if: "matrix.os == 'windows-latest'"
        run: "ls 'C:\\Program Files (x86)\\gnupg\\include'"
      - name: Build binary
        if: "matrix.os != 'windows-latest'"
        run: cargo build --release
        working-directory: "${{ matrix.root }}"
        env:
          RUSTFLAGS: "${{ matrix.rustflags }}"
          GPGME_STATIC: "yes"
      - name: Add mingw32 to PATH
        if: "matrix.os == 'windows-latest'"
        run: "echo \"C:\\msys64\\mingw32\\bin\" >> $env:GITHUB_PATH\n"
      - name: Build Windows binary
        if: "matrix.os == 'windows-latest'"
        run: cargo build --release --target i686-pc-windows-gnu
        working-directory: "${{ matrix.root }}"
        env:
          RUSTFLAGS: "${{ matrix.rustflags }}"
          GPGME_STATIC: "yes"
      - name: Upload binary
        if: "matrix.os != 'windows-latest'"
        uses: actions/upload-release-asset@v1
        with:
          upload_url: "${{ needs.github-publish.outputs.upload_url }}"
          asset_path: "target/release/${{ matrix.bin_name }}"
          asset_name: "versio__${{ matrix.target }}"
          asset_content_type: application/octet-stream
      - name: Upload Windows binary
        if: "matrix.os == 'windows-latest'"
        uses: actions/upload-release-asset@v1
        with:
          upload_url: "${{ needs.github-publish.outputs.upload_url }}"
          asset_path: "target/i686-pc-windows-gnu/release/${{ matrix.bin_name }}"
          asset_name: "versio__${{ matrix.target }}"
          asset_content_type: application/octet-stream