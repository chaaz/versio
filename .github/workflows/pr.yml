---
# DO NOT EDIT
# Created from template "pr.yml".
name: pr
"on":
  - workflow_dispatch
env:
  RUSTFLAGS: "-D warnings"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  GITHUB_USER: "${{ github.actor }}"
jobs:
  project-matrixes:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      cargo-matrix: "${{ steps.find-cargo-matrix.outputs.matrix }}"
      all-matrix: "${{ steps.find-all-matrix.outputs.matrix }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Find cargo matrix
        id: find-cargo-matrix
        run: "echo \"::set-output name=matrix::{\\\"include\\\":$(versio -l none info -l cargo -R -N)}\""
      - name: Find all matrix
        id: find-all-matrix
        run: "echo \"::set-output name=matrix::{\\\"include\\\":$(versio -l none info -a -R -N)}\""
  versio-checks:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Fetch history
        run: git fetch --unshallow
      - name: Check projects
        run: versio check
      - name: Output plan
        run: versio plan
  cargo-checks:
    needs: project-matrixes
    runs-on: ubuntu-latest
    strategy:
      matrix: "${{ fromJson(needs.project-matrixes.outputs.cargo-matrix) }}"
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    defaults:
      run:
        working-directory: "${{ matrix.root }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libgpg-error-dev libgpgme-dev
      - name: Get cargo stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Get cargo nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Find paths
        id: cargo-find-paths
        run: "echo ::set-output name=cargo-lock-glob::\"${{ matrix.root }}\"/**/Cargo.lock"
      - name: Cache cargo and target
        uses: actions/cache@v1
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n${{ matrix.root }}/target\n"
          key: "${{ runner.os }}-cargo-${{ hashFiles(steps.cargo-find-paths.outputs.cargo-lock-glob) }}"
      - name: Check format
        run: cargo +nightly fmt -- --check