key: job-publish-versio
value:
  needs: github-publish
  strategy:
    matrix:
      include:
        - os: ubuntu-latest
          target: 'x86_64-unknown-linux-gnu'
          root: '.'
          rustflags: '-D warnings -C link-args=-s'
          bin_name: 'versio'
        - os: macos-latest
          target: 'x86_64-apple-darwin'
          root: '.'
          rustflags: '-D warnings'
          bin_name: 'versio'
        - os: windows-latest
          target: 'x86_64-pc-win32.exe'
          root: '.'
          rustflags: '-D warnings'
          bin_name: 'versio.exe'
  if: SNIPPET_not-skip-ci
  runs-on: ${{ matrix.os }}
  steps:
    - name: Checkout release
      uses: actions/checkout@v2
      with:
        ref: main
    - SNIPPET_get-cargo-os
    - name: Build Ubuntu binary
      if: matrix.os == 'ubuntu-latest'
      run: cargo build --release
      working-directory: ${{ matrix.root }}
      env:
        RUSTFLAGS: ${{ matrix.rustflags }}
        # We are hard-coding where we think that apt/brew/choco have
        # installed the libgpg and gpgme libs: we need to have all these
        # set, because the build helpers will not respect the static
        # flag from the env unless libs/includes are also found via the
        # env. We also only call out static only for the specific
        # libgpg-error and gpgme libs, because other linked libs
        # (notably: pthread) cannot reliably be linked statically.
        LIBGPG_ERROR_INCLUDE: /usr/include/x86_64-linux-gnu
        LIBGPG_ERROR_LIB_DIR: /usr/lib/x86_64-linux-gnu
        LIBGPG_ERROR_LIBS: static=gpg-error
        # LIBGPG_ERROR_STATIC: yes
        GPGME_INCLUDE: /usr/include
        GPGME_LIB_DIR: /usr/lib/x86_64-linux-gnu
        GPGME_LIBS: static=gpgme:static=assuan
        # GPGME_STATIC: yes
    - name: Build MacOS binary
      if: matrix.os == 'macos-latest'
      run: cargo build --release
      working-directory: ${{ matrix.root }}
      env:
        RUSTFLAGS: ${{ matrix.rustflags }}
        # See comments in the above "Build Ubuntu binary" step to
        # explain these env.
        LIBGPG_ERROR_INCLUDE: /usr/local/opt/libgpg-error/include
        LIBGPG_ERROR_LIB_DIR: /usr/local/opt/libgpg-error/lib
        LIBGPG_ERROR_LIBS: static=gpg-error
        GPGME_INCLUDE: /usr/local/opt/libassuan/include:/usr/local/opt/gpgme/include
        GPGME_LIB_DIR: /usr/local/opt/libassuan/lib:/usr/local/opt/gpgme/lib
        GPGME_LIBS: static=gpgme:static=assuan
    - name: Add mingw32 to PATH
      # See comments in `../snippets/get-cargo-os.yml`
      if: matrix.os == 'windows-latest'
      run: |
        echo "C:\msys64\mingw32\bin" >> $env:GITHUB_PATH
    - name: Build Windows binary
      # We're not going to try to statically link for Windows; see
      # comments in `../snippets/get-cargo-os.yml`. Because we aren't
      # statically linking, we don't have to specify the build locations
      # in the environment; the build scripts will find them via the
      # registry and/or the `gpgme-config` / `gpg-error-config`
      # programs.
      if: matrix.os == 'windows-latest'
      run: cargo build --release --target i686-pc-windows-gnu
      working-directory: ${{ matrix.root }}
      env:
        RUSTFLAGS: ${{ matrix.rustflags }}
    - name: Upload binary
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.github-publish.outputs.upload_url }}
        asset_path: target/release/${{ matrix.bin_name }}
        asset_name: versio__${{ matrix.target }}
        asset_content_type: application/octet-stream
    - name: Upload Windows binary
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.github-publish.outputs.upload_url }}
        asset_path: target/i686-pc-windows-gnu/release/${{ matrix.bin_name }}
        asset_name: versio__${{ matrix.target }}
        asset_content_type: application/octet-stream
