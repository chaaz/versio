key: get-cargo-os
value:
  - name: Install Ubuntu dependencies
    if: matrix.os == 'ubuntu-latest'
    run: sudo apt-get update && sudo apt-get install -y libgpg-error-dev libgpgme-dev
  - name: Install MacOS dependencies
    if: matrix.os == 'macos-latest'
    run: brew update; brew install gpgme
  - name: Install Windows dependencies
    if: matrix.os == 'windows-latest'
    # Use choco to install gnupg; directly downloading + running the
    # gnupg.exe installer silently fails somehow after setting the
    # registry, but before/during writing to the `C:\Program Files
    # (x86)\gnupg` filesystem. Also see
    # https://github.com/actions/virtual-environments/issues/2876 to
    # ensure that the $env:PATH doesn't run out of characters when
    # running choco.
    run: |
      choco install -y gnupg
      echo "C:\Program Files (x86)\GnuPG\bin" >> $env:GITHUB_PATH
  - name: Get cargo stable
    if: matrix.os != 'windows-latest'
    uses: actions-rs/toolchain@v1
    with:
      toolchain: stable
      components: clippy
  - name: Get cargo nightly
    if: matrix.os != 'windows-latest'
    uses: actions-rs/toolchain@v1
    with:
      toolchain: nightly
      components: rustfmt
  - name: Get Windows cargo stable
    # I give up. We are going to distribute Windows Versio as a 32-bit
    # dynamic-link to gpgme, and include documentation that gpgme is
    # required to run.
    #
    # Commit `88e4066` (v0.5.3, 20210818023324Z) of this repo contains a
    # static-link for all three platforms build on GitHub Actions. This
    # is a big step over the previous successful build `d0d3533`
    # (20210803124432T-0600) which inadvertantly dynamically linked the
    # gpgme libraries on all platforms.
    #
    # For Windows especially, `88e4066` was the culmination of a lot
    # of effort: we downloaded and built the gpg-error, assuan, and
    # gpgme dependencies manually, since the publically-available
    # pre-built dependencies (via chocolatey, et al) only contain
    # dynamic 32-bit libs, and had to use the msys2 shell to incorporate
    # the gnu toolchain. However, even then the resulting Windows
    # executable couldn't bind to `gpg-agent` or fork `gpgme-w32spawn`,
    # likely as a result of the static linkage that the gpgme system was
    # not designed to accomodate.
    #
    # So, we've reverted the Windows build steps back to their dynamic
    # 32-bit instructions, which are still somewhat convoluted: we need
    # to use the 32-bit-msvc toolchain to cross-compile to the
    # 32-bit-gnu target, and explicitly add the 32-bit compiler on PATH
    # a la https://github.com/actions/virtual-environments/issues/2549.
    #
    # 2022-12-23: The PATH hack no longer seems to work (perhaps mingw32
    # is no longer supported in msys2?), so we are trying
    # egor-tensin/setup-mingw@v2 to access mingw32.
    if: matrix.os == 'windows-latest'
    uses: actions-rs/toolchain@v1
    with:
      toolchain: stable-i686-pc-windows-msvc
      target: i686-pc-windows-gnu
      components: clippy
      default: true
  - name: Get Windows cargo nightly
    if: matrix.os == 'windows-latest'
    uses: actions-rs/toolchain@v1
    with:
      toolchain: nightly-i686-pc-windows-msvc
      target: i686-pc-windows-gnu
      components: rustfmt
  - name: Update Windows target configuration
    if: matrix.os == 'windows-latest'
    run: rustup set default-host i686-pc-windows-gnu
  - name: Find paths
    id: cargo-find-paths
    run: 'echo ::set-output name=cargo-lock-glob::"${{ matrix.root }}"/**/Cargo.lock'
  - name: Cache cargo and target
    uses: actions/cache@v1
    with:
      path: |
        ~/.cargo/registry
        ~/.cargo/git
        ${{ matrix.root }}/target
      key: ${{ runner.os }}-cargo-${{ hashFiles(steps.cargo-find-paths.outputs.cargo-lock-glob) }}
